#!/bin/sh

function help {
    if [[ -z "${SCRIPT}" ]];
    then
        SCRIPT=`basename $0`
    fi
    printf "\n"
    printf "Usage:\n"
    printf "\t${SCRIPT} [-flags]"
    printf "\n"
    printf "Mandatory Flags:\n"
    printf "\t-w, --workspace-name:\n"
    printf "\tThe name of the Workspace (creates new or uses existing).\n"
    printf "\n"
    printf "\t-r, --aws-region:\n"
    printf "\tThe AWS Region the cluster is located in.\n"
    printf "\n"
    printf "\t-p, --aws-profile:\n"
    printf "\tThe AWS Profile being used.\n"
    printf "\n"
    printf "\t-r, --cluster-name:\n"
    printf "\tThe Name of the EKS cluster to connect to.\n"
    printf "\n"
    printf "Optional Flags:\n"
    printf "\t-j, --project-dir:\n"
    printf "\tThe local directory to map as a project directory.\n"
    printf "\n"
    printf "Examples:\n"
    printf "\t# Connects to a dev cluster\n"
    printf "\t${SCRIPT} -w 'EKS Dev' -r 'us-east-1' -c 'MyDevCluster'\n"
    printf "\n"
    printf "\t# Connects to a dev cluster with the current dir as a project dir\n"
    printf "\t${SCRIPT} -w 'EKS Dev' -r 'us-east-1' -c 'MyDevCluster' -j .\n"
    printf "\n"
    exit 1
}

for arg in "$@"; do
  shift
  case "$arg" in
    '--help')            set -- "$@" '-h'   ;;
    '--workspace-name')  set -- "$@" '-w'   ;;
    '--aws-region')      set -- "$@" '-r'   ;;
    '--aws-profile')     set -- "$@" '-p'   ;;
    '--cluster-name')    set -- "$@" '-c'   ;;
    '--project-dir')     set -- "$@" '-j'   ;;
    *)                   set -- "$@" "$arg" ;;
  esac
done

while getopts ":w:p:r:c:j:h:" option; do
    case "${option}" in
        h)
            help
            ;;
        w)
            export WORKSPACE_NAME=${OPTARG}
            ;;
        r)
            export AWS_REGION=${OPTARG}
            ;;
        p)
            export AWS_PROFILE=${OPTARG}
            ;;
        c)
            export CLUSTER_NAME=${OPTARG}
            ;;
        j)
            export PROJECT_DIR=${OPTARG}
            PROJECT_PARTITION=" -v ${PROJECT_DIR}:/root/proj/"
            MOUNT_POINT=" --mount ${PROJECT_DIR}"
            ;;
        *)
            printf "${BRIGHT}The flag ${RED}${option}${WHITE} is not supported provided!${NORMAL}\n"
            help
            ;;
    esac
done
shift $((OPTIND-1))

if [[ -z "${WORKSPACE_NAME}" ]];
then
    printf "${BRIGHT}${RED}Workspace Name was not provided!${NORMAL}\n"
    help
fi

if [[ -z "${AWS_PROFILE}" ]];
then
    printf "${BRIGHT}${RED}AWS Profile was not provided!${NORMAL}\n"
    help
fi

if [[ -z "${AWS_REGION}" ]];
then
    printf "${BRIGHT}${RED}AWS Region was not provided!${NORMAL}\n"
    help
fi

if [[ -z "${CLUSTER_NAME}" ]];
then
    printf "${BRIGHT}${RED}Cluster Name was not provided!${NORMAL}\n"
    help
fi

_docker_run_it \
    --image ${MY_DOCKER_IMAGES_REPO}/eks:$(cat ${HOME}/.my-docker-images.release) \
    --workspace-name "${WORKSPACE_NAME}" \
    ${MOUNT_POINT} \
    --extra-params " -v ${HOME}/.aws/:/root/.aws \
    -v WORKSPACE_DIR/.kube:/root/.kube \
    --env AWS_PROFILE=${AWS_PROFILE} \
    --env AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} \
    --env AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} \
    --env AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN} \
    --env AWS_REGION=${AWS_REGION} \
    --env EKS_CLUSTER=${CLUSTER_NAME}"
